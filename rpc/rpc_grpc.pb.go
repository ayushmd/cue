// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: rpc/rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchedulerService_Ping_FullMethodName        = "/SchedulerService/Ping"
	SchedulerService_Listen_FullMethodName      = "/SchedulerService/Listen"
	SchedulerService_PushItem_FullMethodName    = "/SchedulerService/PushItem"
	SchedulerService_Ack_FullMethodName         = "/SchedulerService/Ack"
	SchedulerService_CreateQueue_FullMethodName = "/SchedulerService/CreateQueue"
	SchedulerService_ListQueues_FullMethodName  = "/SchedulerService/ListQueues"
	SchedulerService_DeleteQueue_FullMethodName = "/SchedulerService/DeleteQueue"
)

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerServiceClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	Listen(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ItemResponse], error)
	PushItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Response, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*Response, error)
	CreateQueue(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (*Response, error)
	ListQueues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListQueueResponse, error)
	DeleteQueue(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (*Response, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SchedulerService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) Listen(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ItemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SchedulerService_ServiceDesc.Streams[0], SchedulerService_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueueNameRequest, ItemResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SchedulerService_ListenClient = grpc.ServerStreamingClient[ItemResponse]

func (c *schedulerServiceClient) PushItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SchedulerService_PushItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SchedulerService_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) CreateQueue(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SchedulerService_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) ListQueues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueueResponse)
	err := c.cc.Invoke(ctx, SchedulerService_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) DeleteQueue(ctx context.Context, in *QueueNameRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SchedulerService_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility.
type SchedulerServiceServer interface {
	Ping(context.Context, *Empty) (*Response, error)
	Listen(*QueueNameRequest, grpc.ServerStreamingServer[ItemResponse]) error
	PushItem(context.Context, *ItemRequest) (*Response, error)
	Ack(context.Context, *AckRequest) (*Response, error)
	CreateQueue(context.Context, *QueueNameRequest) (*Response, error)
	ListQueues(context.Context, *Empty) (*ListQueueResponse, error)
	DeleteQueue(context.Context, *QueueNameRequest) (*Response, error)
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServiceServer struct{}

func (UnimplementedSchedulerServiceServer) Ping(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSchedulerServiceServer) Listen(*QueueNameRequest, grpc.ServerStreamingServer[ItemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSchedulerServiceServer) PushItem(context.Context, *ItemRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushItem not implemented")
}
func (UnimplementedSchedulerServiceServer) Ack(context.Context, *AckRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedSchedulerServiceServer) CreateQueue(context.Context, *QueueNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedSchedulerServiceServer) ListQueues(context.Context, *Empty) (*ListQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedSchedulerServiceServer) DeleteQueue(context.Context, *QueueNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}
func (UnimplementedSchedulerServiceServer) testEmbeddedByValue()                          {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueueNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServiceServer).Listen(m, &grpc.GenericServerStream[QueueNameRequest, ItemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SchedulerService_ListenServer = grpc.ServerStreamingServer[ItemResponse]

func _SchedulerService_PushItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).PushItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_PushItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).PushItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).CreateQueue(ctx, req.(*QueueNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).ListQueues(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).DeleteQueue(ctx, req.(*QueueNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SchedulerService_Ping_Handler,
		},
		{
			MethodName: "PushItem",
			Handler:    _SchedulerService_PushItem_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _SchedulerService_Ack_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _SchedulerService_CreateQueue_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _SchedulerService_ListQueues_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _SchedulerService_DeleteQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _SchedulerService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/rpc.proto",
}
